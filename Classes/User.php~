<?php
require_once'../Classes/dbConnection.php';
require_once 'Admin.php';
require_once 'Customer.php';
class User{
    protected $userID;

    protected $userEmail;
    protected $userPassword;
    protected $isAdmin;
    protected $name;

    public function __construct($userID, $userEmail, $isAdmin = 0, $userPassword = null, $name = ''){
        $this->userID = $userID;
        $this->userEmail = $userEmail;
        $this->isAdmin = $isAdmin;
        $this->name = $name;
        $this->userPassword = $userPassword;
    }

    // Basic getters
    public function getUserID(){
        return $this->userID;
    }


    
    public function getName(){
        return $this->name;
    }

    public function getUserEmail(){
        return $this->userEmail;
    }
    
    public function getIsAdmin(){
        return $this->isAdmin;
    }
    
    public function getUserPassword(){
        return $this->userPassword;
    }
    /**
     * Instantiate User or Admin from DB row.
     */
    public static function fromDb(array $data){
        if ($data['isAdmin']) {
            return new Admin(
                $data['userID'],
                $data['userEmail'],
                $data['isAdmin'],
                $data['userPassword'],
                $data['name']
            );
        } else {
            return new Customer(
                $data['userID'],
                $data['userEmail'],
                $data['isAdmin'],
                $data['userPassword'],
                $data['name']
            );
        }
    }

    /**
     * Find a user by email.
     */
    public static function findByEmail($email){
        $db = dbConnection::getConnection();
        $stmt = $db->prepare("SELECT userID, userEmail, userPassword, isAdmin, name FROM users WHERE userEmail = :email");
        $stmt->bindParam(':email', $email);
        $stmt->execute();
        $data = $stmt->fetch(\PDO::FETCH_ASSOC);
        if ($data) {
            return self::fromDb($data);
        }
        return null;
    }

    /**
     * Save new user to database.
     */
    public function save(){
        try {
            $db = dbConnection::getConnection();

            $sql = "INSERT INTO users (userPassword, userEmail, isAdmin, name) VALUES (:p, :e, :a, :n)";
            $stmt = $db->prepare($sql);
            $stmt->bindParam(':p', $this->userPassword);
            $stmt->bindParam(':e', $this->userEmail);
            $stmt->bindParam(':a', $this->isAdmin, \PDO::PARAM_INT);
            $stmt->bindParam(':n', $this->name);
            $executed = $stmt->execute();
            if ($executed) {
                $this->userID = (int)$db->lastInsertId();
            }
            return $executed;
        } catch (\PDOException $e) {
            return false;
        }
    }
}
